package Info;

/**
 * @author Ahmed Elmowafy
 * this is built using NetBeans editor.
 * this is a frame to show the instructions for the user
 */
public class Instruccion extends javax.swing.JFrame {

    /**
     * Creates new form Instruction
     */
    public Instruccion() {
        initComponents();
        setLocationRelativeTo(null);
        jTextArea1.setCaretPosition(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Instructions");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jScrollPane1.setFocusCycleRoot(true);
        jScrollPane1.setHorizontalScrollBar(null);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("#Modos de operación\n----------------\n-Modo fijo\n Funciona configurando los datos de trabajos iniciales para el programa\n para trabajar en.\n : Archivo> Agregar mis datos\n\n-Modo aleatorio\n El programa establece los datos iniciales en sí al azar.\n\n-------------------------------------------------- -----------\n#Controles\n----------\n- (cantidad de trabajos)\n establecer el número de trabajos deseados (procesos) para la simulación\n y puede variar de 2 a 8 trabajos.\n\n- (Algoritmo)\n Elija el algoritmo deseado para la simulación.\n 1) FCFS -> Primero en llegar, primero en servir\n 2) SJF -> El trabajo más corto primero\n 3) STRF -> El tiempo más corto restante primero\n 4) RR -> Round Robin\n 5) prioridad1 -> Prioridad no preventiva\n 6) prioridad2 -> Prioridad preventiva\n\n- (velocidad sim)\n controlar la velocidad de la simulación automática,\n 2 es el más rápido y 8 es el más lento.\n\n- (Cuántica)\n seleccione el tiempo cuántico deseado para la ronda\n Algoritmo Robin.\n\n- (botón de simulación)\n .comience la simulación automática por la velocidad seleccionada\n  en el cuadro combinado \"velocidad sim\".\n . reanudar la simulación después de una pausa.\n\n- (botón Detener)\n pausa la simulación automática.\n\n- (botón del siguiente paso)\n usado para ejecutar la simulación manualmente paso a paso después\n cada clic\n\n- (botón de reinicio)\n reiniciar la simulación desde el principio con el mismo\n datos y la misma cantidad de trabajos (restablecer todos los datos\n al punto de inicio).\n\n- (iniciar otro botón de simulación)\n reiniciar la simulación con nuevos datos aleatorios.\n- (botón de finalización)\n llegar al final de la simulación de inmediato.\n-------------------------------------------------- -----------\n# Pool de trabajo\n----------\n la tabla muestra todos los datos de todos los trabajos en el\n simulación.\n \n -#        : Número de trabajo.\n -Llegar: hora de llegada del trabajo.\n -burst: tiempo de explosión del trabajo.\n -prioridad: prioridad laboral.\n -start: tiempo de ejecución de inicio de trabajo.\n -wait: todo el tiempo de espera del trabajo (hasta ahora).\n -remain: todo el trabajo permanece tiempo (hasta ahora).\n -finish: tiempo de ejecución de finalización del trabajo.\n -turn: tiempo de respuesta del trabajo (hasta ahora).\n-%: el porcentaje terminado del trabajo.\n-------------------------------------------------- -----------\n#Panel de cola lista\n------------------\n muestra los trabajos en la cola lista en un tiempo específico.\n nota: si la cola de preparación está vacía y la CPU está inactiva\n el nuevo trabajo no aparecerá en la cola lista y será\n ejecutado en la CPU de inmediato.\n-------------------------------------------------- -----------\nPanel #CPU\n-----------\n Mostrar el estado de la CPU en un momento específico.\n \n - trabajo actual\n muestra el número del trabajo actual ejecutado por la CPU.\n \n - tiempo actual\nmuestra el intervalo de tiempo actual de la unidad para ejecutar un trabajo.\n \n - utilización\n Muestra la utilización de la CPU (hasta ahora).\n (el porcentaje de tiempo de trabajo de la CPU al tiempo de inactividad)\n-------------------------------------------------- -----------\n#Promedio\n--------\n - Espere\n muestra el tiempo de espera promedio de todos los trabajos (hasta ahora).\n \n - Giro de vuelta\n muestra el tiempo de respuesta promedio de todos los trabajos (hasta ahora).\n-------------------------------------------------- -----------\n#Gráfico de gantt\n-------------\n visualización del diagrama de Gantt de todos los trabajos ejecutados\n in the simulation so far.\n-------------------------------------------------------------");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Instruccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Instruccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Instruccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Instruccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Instruccion().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
